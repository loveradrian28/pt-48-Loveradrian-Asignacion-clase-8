PROGRAMACION IMPERATIVA Y PROGRAMACION DECLARATIVA

La programación declarativa describe el problema que se quiere solucionar, 
pero no las instrucciones necesarias para hacerlo, mientras que en la 
programación imperativa se detallan las instrucciones necesarias para llegar a la solución.

En Javascript podemos utilizar ambos metodos para trabajar:

Para ejemplificar ambos metodos utilizaremos un reductor: 

Esta sería una implementación imperativa de un reductor:
<!--Comienzo del reductor-->
const arr = [2, 4, 6]
let acc = 0
for (let i = 0; i < arr.length; i++){
  acc += arr[i]
}
console.log(`El sumatorio resulta en ${acc}`)  
// El sumatorio resulta en 12
<!--Fin del reductor-->

O su versión declarativa estándar a través del método .reduce() de ES6:

<!--Aqui comienza el reductor-->
const arr = [2, 4, 6]
const arraySum = arr.reduce()
console.log(`El sumatorio resulta en ${arraySum}`)  
// El sumatorio resulta en 12
<!--Aqui termina el reductor-->

<!--#Cosas a tener en cuenta: 
-El metodo .reduce() devuelve un unico valor: el resultado acumulado de la funcion. 
-El metodo .reduce() no cambia la funcion original.
-El método reduce() ejecuta una función reductora para el elemento del array.
-->

Si comparamos ambas maneras de programar podemos llegar a algunas conclusiones: 

Optimizacion: 

Imperativa: supone un mayor volumen de código ya que la secuencia 
de instrucciones y estructuras necesarias queda expuesta en su totalidad.

Declarativa: dispone de sus procesos lógicos en capas inferiores 
a la que nos encontramos, resultando en códigos más livianos.


legibilidad: 

Imperativa: de baja legibilidad, se vale de recursos básicos del
lenguaje que requieren de una curva de aprendizaje para implementarlos o interpretarlos, 
como es un bucle for.

Declarativa: de alta carga léxica, relega 
en su nombre la funcionalidad que persigue. Declara intencionalidad, 
haciéndola altamente legible e identificable.